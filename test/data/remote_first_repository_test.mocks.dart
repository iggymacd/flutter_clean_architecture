// Mocks generated by Mockito 5.4.4 from annotations
// in clean_architecture_template/test/data/remote_first_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:clean_architecture_template/application/interfaces/repository.dart'
    as _i3;
import 'package:clean_architecture_template/domain/entities/identifiable.dart'
    as _i7;
import 'package:clean_architecture_template/utilities/error/failures.dart'
    as _i6;
import 'package:clean_architecture_template/utilities/network_info.dart' as _i8;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'remote_first_repository_test.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i3.Repository<_i4.Todo> {
  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> add(_i4.Todo? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [entity],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
            _FakeEither_0<_i6.Failure, void>(
          this,
          Invocation.method(
            #add,
            [entity],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, void>>.value(
                _FakeEither_0<_i6.Failure, void>(
          this,
          Invocation.method(
            #add,
            [entity],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> delete(_i4.Todo? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [entity],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
            _FakeEither_0<_i6.Failure, void>(
          this,
          Invocation.method(
            #delete,
            [entity],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, void>>.value(
                _FakeEither_0<_i6.Failure, void>(
          this,
          Invocation.method(
            #delete,
            [entity],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i4.Todo>>> getAll() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, List<_i4.Todo>>>.value(
            _FakeEither_0<_i6.Failure, List<_i4.Todo>>(
          this,
          Invocation.method(
            #getAll,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, List<_i4.Todo>>>.value(
                _FakeEither_0<_i6.Failure, List<_i4.Todo>>(
          this,
          Invocation.method(
            #getAll,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i4.Todo>>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i4.Todo>> getById(_i7.UniqueId? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i4.Todo>>.value(
            _FakeEither_0<_i6.Failure, _i4.Todo>(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, _i4.Todo>>.value(
                _FakeEither_0<_i6.Failure, _i4.Todo>(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i4.Todo>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> update(_i4.Todo? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [entity],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
            _FakeEither_0<_i6.Failure, void>(
          this,
          Invocation.method(
            #update,
            [entity],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, void>>.value(
                _FakeEither_0<_i6.Failure, void>(
          this,
          Invocation.method(
            #update,
            [entity],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, void>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i8.NetworkInfo {
  @override
  _i5.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
